# Generated by CodiumAI
import numpy as np
import pytest
import scipy

from knotoids.graph import SphericalNode
from knotoids.spherical_graph import SphericalGraph


class TestSphericalGraph:
    # Computes graph on the surface of the sphere
    def test_compute_graph(self):
        # Arrange
        pl_curve = np.loadtxt("tests/data/test_curve.txt")
        graph = SphericalGraph(pl_curve)

        # Act
        nodes, edges = graph.compute_graph()

        # Assert
        assert len(nodes) == 92
        assert len(edges) == 114

    # Finds the intersection of two graphs
    def test_resolve_intersections(self):
        # Arrange
        nodes = {
            0: SphericalNode(index=0, position=np.array([0, 0, 1])),
            1: SphericalNode(index=1, position=np.array([1, 0, 0])),
            2: SphericalNode(index=2, position=np.array([0, 1, 0])),
            3: SphericalNode(index=3, position=np.array([0, -1, 0])),
            4: SphericalNode(index=4, position=np.array([-1, 0, 0])),
            5: SphericalNode(index=5, position=np.array([0, 0, -1])),
        }
        edges = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5)]
        graph = SphericalGraph(None)

        # Act
        new_nodes, new_edges = graph._resolve_intersections(nodes, edges)

        # Assert
        assert len(new_nodes) == 6
        assert len(new_edges) == 5

    # Handles invalid value encountered in intersection
    def test_invalid_intersection(self):
        # Arrange
        nodes = {
            0: SphericalNode(index=0, position=np.array([0, 0, 1])),
            1: SphericalNode(index=1, position=np.array([1, 0, 0])),
            2: SphericalNode(index=2, position=np.array([0, 1, 0])),
            3: SphericalNode(index=3, position=np.array([0, -1, 0])),
            4: SphericalNode(index=4, position=np.array([-1, 0, 0])),
            5: SphericalNode(index=5, position=np.array([0, 0, -1])),
        }
        edges = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5)]
        graph = SphericalGraph(None)

        # Act
        new_nodes, new_edges = graph._resolve_intersections(nodes, edges)

        # Assert
        assert len(new_nodes) == 6
        assert len(new_edges) == 5
