# Generated by CodiumAI
import numpy as np
import pytest

from knotoids.graph import PlanarNode
from knotoids.planar_graph import PlanarGraph


class TestPlanarGraph:
    # can construct a PlanarGraph object from nodes and edges
    def test_construct_planar_graph(self):
        nodes = {
            1: PlanarNode(1, np.array([0, 0])),
            2: PlanarNode(2, np.array([1, 0])),
            3: PlanarNode(3, np.array([0, 1])),
        }
        edges = [(1, 2), (2, 3), (3, 1)]
        graph = PlanarGraph(nodes, edges)

        assert graph.nodes == nodes
        assert graph.edges == edges

    # can generate the faces of the planar graph
    def test_generate_faces(self):
        nodes = {
            1: PlanarNode(1, np.array([0, 0])),
            2: PlanarNode(2, np.array([1, 0])),
            3: PlanarNode(3, np.array([0, 1])),
        }
        edges = [(1, 2), (2, 3), (3, 1)]
        graph = PlanarGraph(nodes, edges)

        faces = list(graph.generate_faces())

        assert len(faces) == 2
        assert faces[0].boundary_nodes == [nodes[1], nodes[2], nodes[3]]
        assert faces[0].internal_point is not None
        assert not faces[0].is_external

    # can find the face boundaries of the planar graph
    def test_find_boundaries(self):
        nodes = {
            1: PlanarNode(1, np.array([0, 0])),
            2: PlanarNode(2, np.array([1, 0])),
            3: PlanarNode(3, np.array([0, 1])),
        }
        edges = [(1, 2), (2, 3), (3, 1)]
        graph = PlanarGraph(nodes, edges)

        boundaries = list(graph._find_boundaries())
        expected_boundaries = [
            [nodes[1], nodes[2], nodes[3]],
            [nodes[3], nodes[2], nodes[1]],
        ]

        assert len(boundaries) == 2
        for boundary in expected_boundaries:
            # check boundary is in boundaries up to cyclic permutation
            assert any(
                [
                    boundary == generated_boundary[i:] + generated_boundary[:i]
                    for generated_boundary in boundaries
                    for i in range(len(generated_boundary))
                ]
            )

    # can handle an empty graph
    def test_empty_graph(self):
        nodes = {}
        edges = []
        graph = PlanarGraph(nodes, edges)

        faces = list(graph.generate_faces())

        assert len(faces) == 0

    # can handle a graph with a single node and no edges
    def test_single_node_no_edges(self):
        nodes = {1: PlanarNode(1, np.array([0, 0]))}
        edges = []
        graph = PlanarGraph(nodes, edges)

        faces = list(graph.generate_faces())

        assert len(faces) == 0
